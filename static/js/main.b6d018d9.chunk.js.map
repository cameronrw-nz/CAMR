{"version":3,"sources":["Components/StoryContainer.tsx","Components/StoryPanel.tsx","Components/NavigationConstants.ts","Components/Page.tsx","Components/Home.tsx","Components/Tabs.tsx","Components/Adventure/index.tsx","Components/Coding/index.tsx","Components/Models/blogPosts.tsx","Components/Models/index.tsx","Components/Reading/index.tsx","App.tsx","serviceWorker.ts","index.tsx","Resources/Images/TS-Marine.jpg","Resources/Images/Coding.jpg","Resources/Images/Fushimi-Inari-Taisha.jpg","Resources/Images/BookShelf.jpg"],"names":["StoryContainer","_ref","children","react_default","a","createElement","Container","styled","div","_templateObject","StoryPanel","image","defaultImgColour","id","item","imageUrl","title","PanelImage","src","react_router_dom","to","concat","style","textDecoration","color","Panel","PanelImageContainer","backgroundColor","Footer","NavigationConstants","StoryPanel_templateObject","_templateObject2","img","_templateObject3","p","_templateObject4","CommonPage","_ref$isStoryPage","isStoryPage","Page","ScrollableContent","Page_templateObject","Page_templateObject2","props","Home","match","_useState","useState","undefined","_useState2","Object","slicedToArray","storyPanels","setStoryPanels","useEffect","Coding","require","Adventure","Models","Reading","storyPanelsDisplay","map","story","index","assign","key","Tabs","tabs","navItem","push","Tab","TabList","ul","Tabs_templateObject","li","Tabs_templateObject2","blogPosts","markDown","process","StoryPanelInfos","content","params","input","find","storyPanel","react_markdown_default","escapeHtml","source","App","console","log","basename","className","react_router","path","exact","component","withRouter","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.b6d018d9.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface IStoryContainerProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport function StoryContainer({ children }: IStoryContainerProps) {\r\n    return (\r\n        <Container>\r\n            {children}\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n`","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { NavigationConstants } from './NavigationConstants';\r\n\r\nexport interface IStoryPanelProps {\r\n}\r\n\r\nexport interface IStoryPanelInfo {\r\n    defaultImgColour?: string;\r\n    title: string;\r\n    item: NavigationConstants;\r\n    markDown?: string;\r\n    description?: string;\r\n    imageUrl?: any;\r\n    id?: string;\r\n}\r\n\r\nexport function StoryPanel({ defaultImgColour, id, item, imageUrl, title }: IStoryPanelProps & IStoryPanelInfo) {\r\n    let image;\r\n\r\n    if (imageUrl) {\r\n        image = (\r\n            <PanelImage\r\n                src={imageUrl}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Link to={`${item}${id ? \"/\" + id : \"\"}`} style={{ textDecoration: 'none', color: 'black' }}>\r\n            <Panel>\r\n                <PanelImageContainer style={{ backgroundColor: defaultImgColour || \"grey\" }}>\r\n                    {image}\r\n                </PanelImageContainer>\r\n                <Footer>\r\n                    {title}\r\n                </Footer>\r\n            </Panel>\r\n        </Link>\r\n    )\r\n}\r\n\r\nconst Panel = styled.div`\r\n    width: 260px;\r\n    height: 280px;\r\n    padding: 20px 20px 0px 20px;\r\n\r\n    :hover {\r\n        \r\n        > div {\r\n            box-shadow: 0px 3px 8px grey;\r\n\r\n        }\r\n    }\r\n`\r\n\r\nconst PanelImageContainer = styled.div`\r\n    height: 260px;\r\n    width: 260px;\r\n`\r\n\r\nconst PanelImage = styled.img`\r\n    object-fit: cover;\r\n    max-width:100%;\r\n    max-height:100%;\r\n    height: 100%;\r\n`\r\n\r\nconst Footer = styled.p`\r\n    margin: 0;\r\n    padding: 0;\r\n    font-weight:bold;\r\n`","export enum NavigationConstants {\r\n    Coding = \"/coding\",\r\n    Adventure = \"/adventure\",\r\n    Models = \"/models\",\r\n    Reading = \"/reading\"\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface IPageProps {\r\n    children: React.ReactNode;\r\n    isStoryPage?: boolean;\r\n}\r\n\r\nexport function CommonPage({ children, isStoryPage = false }: IPageProps) {\r\n    return (\r\n        <Page>\r\n            <ScrollableContent isStoryPage={isStoryPage}>\r\n                {children}\r\n            </ScrollableContent>\r\n        </Page>\r\n    )\r\n}\r\n\r\nconst Page = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    height: calc(100% - 74px);\r\n    min-height: 0;\r\n    overflow-y: auto;\r\n    padding-bottom: 20px;\r\n`\r\n\r\nconst ScrollableContent = styled.div`\r\n    background-position: center;\r\n    background-color: white;\r\n    height: fit-content;\r\n    min-height: calc(100% - 20px);\r\n    width: calc(45% - ${(props: IPageProps) => props.isStoryPage ? -80 : 80}px);\r\n    padding: 0px ${(props: IPageProps) => props.isStoryPage ? 0 : 80}px;\r\n    padding-bottom: 20px;\r\n\r\n    @media only screen and (max-width: 768px) {\r\n        min-height: calc(100% - 20px);\r\n        width: calc(90% - ${(props: IPageProps) => props.isStoryPage ? -20 : 20}px);\r\n        max-width: calc(300px - ${(props: IPageProps) => props.isStoryPage ? -20 : 20}px);\r\n        padding: 0px ${(props: IPageProps) => props.isStoryPage ? 0 : 20}px;\r\n        padding-bottom: 20px;\r\n        height: fit-content;\r\n    }\r\n`","import React, { useState, useEffect } from 'react';\r\nimport { StoryContainer } from './StoryContainer';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { IStoryPanelInfo, StoryPanel } from './StoryPanel';\r\nimport { NavigationConstants } from './NavigationConstants';\r\nimport { CommonPage } from './Page';\r\n\r\ninterface IHomeProps extends RouteComponentProps<any> {\r\n\r\n}\r\n\r\nfunction Home({ match }: IHomeProps) {\r\n    const [storyPanels, setStoryPanels] = useState<IStoryPanelInfo[] | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        setStoryPanels([\r\n            { title: \"Coding\", item: NavigationConstants.Coding, imageUrl: require(\"../Resources/Images/Coding.jpg\") },\r\n            { title: \"Adventures\", item: NavigationConstants.Adventure, imageUrl: require(\"../Resources/Images/Fushimi-Inari-Taisha.jpg\") },\r\n            { title: \"Models\", item: NavigationConstants.Models, imageUrl: require(\"../Resources/Images/TS-Marine.jpg\") },\r\n            { title: \"Reading\", item: NavigationConstants.Reading, imageUrl: require(\"../Resources/Images/BookShelf.jpg\") },\r\n        ] as IStoryPanelInfo[])\r\n    }, []);\r\n\r\n    const storyPanelsDisplay = storyPanels && storyPanels.map((story: IStoryPanelInfo, index: number) => {\r\n        return (\r\n            <StoryPanel\r\n                key={index}\r\n                {...story}\r\n            />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <CommonPage isStoryPage={true}>\r\n            <StoryContainer>\r\n                {storyPanelsDisplay}\r\n            </StoryContainer>\r\n        </CommonPage>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from 'styled-components'\r\nimport { NavigationConstants } from './NavigationConstants';\r\n\r\ninterface ITabsProps {\r\n\r\n}\r\n\r\nexport function Tabs(props: ITabsProps) {\r\n    const tabs = []\r\n    for (const navItem in NavigationConstants) {\r\n        tabs.push(\r\n            <Tab key={navItem}>\r\n                <Link to={NavigationConstants[navItem]}>\r\n                    {navItem}\r\n                </Link>\r\n            </Tab>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <Tab>\r\n                <Link to=\"/\">\r\n                    CAMR\r\n                </Link>\r\n            </Tab>\r\n            <TabList>\r\n                {tabs}\r\n            </TabList>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst TabList = styled.ul`\r\n    margin: 8px 0px;\r\n    list-style-type: none;\r\n    padding-inline-start: 0px;\r\n    display: inline-block;\r\n    @media only screen and (max-width: 768px) {\r\n        display: none;\r\n    }\r\n`\r\n\r\nconst Tab = styled.li`\r\n    text-decoration: none;\r\n    border-radius: 4px;\r\n    display: inline;\r\n    margin: 0px 4px;\r\n    padding: 4px 16px;\r\n    \r\n    \r\n    :hover {\r\n        background-color: #444444;\r\n    }\r\n\r\n    a {\r\n        text-decoration: none;\r\n        color: #EEEEEE;\r\n    }\r\n`","import React from 'react';\r\nimport { CommonPage } from '../Page';\r\n\r\ninterface IAdventureProps {\r\n\r\n}\r\n\r\nfunction Adventure(props: IAdventureProps) {\r\n    return (\r\n        <CommonPage>\r\n        </CommonPage>\r\n    )\r\n}\r\n\r\nexport default Adventure","import React from 'react';\r\nimport { CommonPage } from '../Page';\r\n\r\ninterface ICodingProps {\r\n\r\n}\r\n\r\nfunction Coding(props: ICodingProps) {\r\n    return (\r\n        <CommonPage>\r\n        </CommonPage>\r\n    )\r\n}\r\n\r\nexport default Coding","import { IStoryPanelInfo } from \"../StoryPanel\";\r\nimport { NavigationConstants } from \"../NavigationConstants\";\r\n\r\nconst firstRubric = `\r\nMy First Rubric\r\n============\r\n\r\nThese series of Model posts are going to follow my journey in creating Warhammer 40k armies and any other gaming figure related topics.\r\n\r\nAs of the title of the post I have completed 1 whole squad of Thousand Sons Rubrics and I plan on build a few more squads of paint them. In the immediate future expect to see Scarab Occult Terminators, more Rubrics, Abaddon and some CSM.\r\n\r\n<img class=\"embedded-images\" alt=\"rubric\" src=\"${process.env.PUBLIC_URL}/Images/TS-Marine.jpg\"/>\r\n\r\nIt took me a while to decide on a colour scheme as the classic blue and gold is too prominent and I wanted to set my Thousands sons apart. I also wanted to create a custom warband so it's possible to ally in CSM without any lore troubles or without it seeming too much like Chaos Soup. \r\n\r\nI think the paint scheme has turned out well, the red was inspired from the old thousands sons scheme of red and gold. But I decided to dull it down as the candied affect is too much. Next was the trim colour, I wanted to something Tizcan/Egyptian themed that was non-metallic, the bone effect works really well I think. The only thing that's not too great is the base colours imo. It could do with some additional contrast from the other model colour, so perhaps some industrial ruin colouring would have been better, but at this stage I am committed to it :D.\r\n\r\nThe new release of Vigilus ablaze is on its way along with Abaddon the Despoiler!\r\n\r\n<img alt=\"abaddon\" class=\"embedded-images\" src=\"https://whc-cdn.games-workshop.com/wp-content/uploads/2019/02/40kAbaddon-Mar5-Abaddon7tyerhvfsh.jpg\" />\r\n\r\n`\r\n\r\nexport default [\r\n    {\r\n        title: \"My First Rubric\",\r\n        id: \"firstRubric\",\r\n        markDown: firstRubric,\r\n        item: NavigationConstants.Models,\r\n        imageUrl: require(\"../../Resources/Images/TS-Marine.jpg\")\r\n    }\r\n] as IStoryPanelInfo[]\r\n","import React, { useEffect, useState } from 'react';\r\nimport { IStoryPanelProps, StoryPanel, IStoryPanelInfo } from '../StoryPanel';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { StoryContainer } from '../StoryContainer';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { NavigationConstants } from '../NavigationConstants';\r\nimport { CommonPage } from '../Page';\r\nimport StoryPanelInfos from './blogPosts'\r\n\r\nexport interface IModelsProps extends RouteComponentProps<any> {\r\n\r\n}\r\n\r\nfunction Models({ match }: IModelsProps) {\r\n    const currentNavItem = NavigationConstants.Models;\r\n    const [storyPanels, setStoryPanels] = useState<IStoryPanelInfo[] | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        setStoryPanels(StoryPanelInfos)\r\n    }, []);\r\n\r\n    const storyPanelsDisplay = storyPanels && storyPanels.map((story: IStoryPanelInfo, index: number) => {\r\n        return (\r\n            <StoryPanel\r\n                key={index}\r\n                {...story}\r\n            />\r\n        )\r\n    });\r\n\r\n    let content: React.ReactNode;\r\n    if (match.params.id) {\r\n        const input = storyPanels && storyPanels.find(storyPanel => storyPanel.id === match.params.id);\r\n\r\n        if (input !== undefined) {\r\n            content = <ReactMarkdown escapeHtml={false} source={input!.markDown} />\r\n        }\r\n    }\r\n    else {\r\n        content = (\r\n            <StoryContainer>\r\n                {storyPanelsDisplay}\r\n            </StoryContainer>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <CommonPage isStoryPage={match.params.id === undefined}>\r\n            {content}\r\n        </CommonPage>\r\n    )\r\n}\r\n\r\nexport default Models","import React from 'react';\r\nimport { CommonPage } from '../Page';\r\n\r\ninterface IReadingProps {\r\n\r\n}\r\n\r\nfunction Reading(props: IReadingProps) {\r\n    return (\r\n        <CommonPage isStoryPage={true}>\r\n        </CommonPage>\r\n    )\r\n}\r\n\r\nexport default Reading","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch, withRouter } from 'react-router-dom'\r\n\r\nimport './App.css';\r\nimport Home from './Components/Home';\r\nimport { Tabs } from './Components/Tabs';\r\nimport { NavigationConstants } from './Components/NavigationConstants';\r\nimport Adventure from './Components/Adventure';\r\nimport Coding from './Components/Coding';\r\nimport Models, { IModelsProps } from './Components/Models';\r\nimport Reading from './Components/Reading';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        console.log(process.env.PUBLIC_URL)\r\n        return (\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <div className=\"background-image\"></div>\r\n                <div className=\"App\">\r\n                    <header className=\"App-header\">\r\n                        <Tabs />\r\n                    </header>\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={withRouter(Home)} />\r\n                        <Route path={NavigationConstants.Coding} exact component={withRouter(Coding)} />\r\n                        <Route path={NavigationConstants.Adventure} exact component={withRouter(Adventure)} />\r\n                        <Route path={NavigationConstants.Models} exact component={withRouter<IModelsProps>(Models)} />\r\n                        <Route path={`${NavigationConstants.Models}/:id`} exact component={withRouter(Models)} />\r\n                        <Route path={NavigationConstants.Reading} exact component={withRouter(Reading)} />\r\n                    </Switch>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/TS-Marine.b5a6660b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Coding.db59110f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Fushimi-Inari-Taisha.bf73888e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BookShelf.18e5aa26.jpg\";"],"sourceRoot":""}